package main
 
import (
	"bytes"
 "fmt"
 "os/exec"
 "time"
 "log"
"strings"
)
 
func main() {
    fmt.Println(time.Now().Format("2006-1-2 15:04:05"))
    
    cmdresult := runBashCommandAndKillIfTooSlow("/bin/bash /Users/zhangshanci/go_pro/src/54.90/test-go/test.sh", 5)
    
    fmt.Println("sssss:",cmdresult)
}




func runBashCommandAndKillIfTooSlow(command string, killInSeconds time.Duration) string {
    cmd := exec.Command("/bin/bash", "-c", command)

    var out bytes.Buffer
    cmd.Stdout = &out

    err := cmd.Start()
    if err != nil {
        log.Fatal("start process error: ", err)
    }

    done := make(chan error, 1)
    go func() {
        done <- cmd.Wait()
    }()
    select {
    case <-time.After(killInSeconds * time.Second):
        if err := cmd.Process.Kill(); err != nil {
            log.Fatal("failed to kill: ", err)
        }
        <-done
    case err := <-done:
        if err != nil {
            // log.Printf("process done with error = %v", err)
            return "occurError"
        } else {
            return strings.Trim(out.String(), "\n")
        }
    }
    return "occurError"
}


